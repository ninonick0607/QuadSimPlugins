// Copyright 2021-2024 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from service_msgs/msg/ServiceEventInfo.msg - do not modify

#pragma once

// UE
#include "CoreMinimal.h"

// ROS
#include "service_msgs/msg/service_event_info.h"

// rclUE
#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

// Generated Msg/Srv/Action(can be empty)
#include "Msgs/ROS2Time.h"
#include "rosidl_runtime_c/primitives_sequence_functions.h"

// Generated
#include "ROS2ServiceEventInfo.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSServiceEventInfo
{
    GENERATED_BODY()

public:
    static constexpr uint8 REQUEST_SENT = 0;
    static constexpr uint8 REQUEST_RECEIVED = 1;
    static constexpr uint8 RESPONSE_SENT = 2;
    static constexpr uint8 RESPONSE_RECEIVED = 3;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    uint8 EventType = 0;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FROSTime Stamp;

    UPROPERTY(EditAnywhere)
    TArray<uint8> ClientGid;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    int64 SequenceNumber = 0;

    FROSServiceEventInfo()
    {
        ClientGid.SetNumZeroed(16);
    }

    void SetFromROS2(const service_msgs__msg__ServiceEventInfo& in_ros_data)
    {
        EventType = in_ros_data.event_type;

        Stamp.SetFromROS2(in_ros_data.stamp);

        UROS2Utils::SequenceROSToUEArray<uint8, uint8>(in_ros_data.client_gid, ClientGid, 16);

        SequenceNumber = in_ros_data.sequence_number;
    }

    void SetROS2(service_msgs__msg__ServiceEventInfo& out_ros_data) const
    {
        out_ros_data.event_type = EventType;

        Stamp.SetROS2(out_ros_data.stamp);

        UROS2Utils::ArrayUEToROSSequence<uint8, uint8>(ClientGid, out_ros_data.client_gid, 16);

        out_ros_data.sequence_number = SequenceNumber;
    }
};

UCLASS()
class RCLUE_API UROS2ServiceEventInfoMsg : public UROS2GenericMsg
{
    GENERATED_BODY()

public:
    virtual void Init() override;
    virtual void Fini() override;

    virtual const rosidl_message_type_support_t* GetTypeSupport() const override;

    UFUNCTION(BlueprintCallable)
    void SetMsg(const FROSServiceEventInfo& Input);

    UFUNCTION(BlueprintCallable)
    void GetMsg(FROSServiceEventInfo& Output) const;

    virtual void* Get() override;

    UFUNCTION(BlueprintCallable)
    static uint8 CONST_REQUEST_SENT()
    {
        return FROSServiceEventInfo::REQUEST_SENT;
    }
    UFUNCTION(BlueprintCallable)
    static uint8 CONST_REQUEST_RECEIVED()
    {
        return FROSServiceEventInfo::REQUEST_RECEIVED;
    }
    UFUNCTION(BlueprintCallable)
    static uint8 CONST_RESPONSE_SENT()
    {
        return FROSServiceEventInfo::RESPONSE_SENT;
    }
    UFUNCTION(BlueprintCallable)
    static uint8 CONST_RESPONSE_RECEIVED()
    {
        return FROSServiceEventInfo::RESPONSE_RECEIVED;
    }

private:
    virtual FString MsgToString() const override;

    service_msgs__msg__ServiceEventInfo service_event_info_msg;
};
